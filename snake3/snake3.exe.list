EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
snake3.exe -- emu8086 assembler version: 4.05  
 
[ 21.12.2022  --  10:51:05 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]        :                                       
[   5]        :                                       KUpSpeed    equ 48h	
[   6]        :                                       KDownSpeed  equ 50h	
[   7]        :                                       KMoveUp     equ 11h	
[   8]        :                                       KMoveDown   equ 1Fh	
[   9]        :                                       KMoveLeft   equ 1Eh	
[  10]        :                                       KMoveRight  equ 20h	
[  11]        :                                       KExit       equ 01h
[  12]        :                                       
[  13]        :                                       xSize       equ 80
[  14]        :                                       ySize       equ 25
[  15]        :                                       xField      equ 50
[  16]        :                                       yField      equ 21
[  17]        :                                       videoBufferCellSize equ 2
[  18]        :                                       scoreSize equ 4
[  19]        :                                       
[  20]    0100: 00 B8                                 videoStart   dw 0B800h
[  21]    0102: 00 00                                 dataStart    dw 0000h
[  22]    0104: 40 00                                 timeStart    dw 0040h
[  23]    0106: 6C 00                                 timePosition dw 006Ch
[  24]        :                                       
[  25]        :                                       space equ 0020h
[  26]        :                                       spaceBlue equ 4020h ; (3020h), 4020h-red,	
[  27]        :                                       snakeBodySymbol    equ 0A11h ; 0A10h
[  28]        :                                       appleSymbol        equ 0B25h      ;0B15h
[  29]        :                                       VWallSymbol        equ 40BAh     ;30BAh
[  30]        :                                       HWallSymbol        equ 40CDh       ;30CDh
[  31]        :                                       BWallSymbol        equ 3023h     ;4023h
[  32]        :                                       
[  33]        :                                       LeftTopWallSpecialSymbol equ 40C9h  ;30C9h
[  34]        :                                       LeftBottomWallSpecialSymbol equ 40C8h  ;30C8h
[  35]        :                                       RightTopWallSpecialSymbol equ 40BBh    ;30BBh
[  36]        :                                       RightBottomWallSpecialSymbol equ 40BCh  ;30BCh
[  37]        :                                       
[  38]        :                                       fieldSpacingBad equ spaceBlue, VWallSymbol, xField dup(space)
[  39]        :                                       fieldSpacing equ fieldSpacingBad, VWallSymbol
[  40]        :                                       
[  41]    0108: 20 40 20 40 20 40 20 40 20 40 20 40   screen	dw xSize dup(spaceBlue)
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  42]    01A8: 20 40 C9 40 CD 40 CD 40 CD 40 CD 40   dw spaceBlue, LeftTopWallSpecialSymbol, xField dup(HWallSymbol), RightTopWallSpecialSymbol, 27 dup (spaceBlue)
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 BB 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  43]    0248: 20 40 BA 40 20 00 20 00 20 00 20 00   dw fieldSpacing, spaceBlue, 3053h, 3063h, 306Fh, 3072h, 3065h, 303Ah, spaceBlue
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                53 30 63 30 6F 30 72 30 65 30 3A 30 
                20 40                               
[  44]    02C2: 30 30 30 30 30 30 30 30 20 40 20 40   score	dw scoreSize dup(3030h), xSize - xField - scoreSize - 11 dup(spaceBlue)
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40                               
[  45]    02E8: 20 40 BA 40 20 00 20 00 20 00 20 00   dw fieldSpacing, spaceBlue, 3053h, 3070h, 2 dup(3065h), 3064h, 303Ah, spaceBlue
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                53 30 70 30 65 30 65 30 64 30 3A 30 
                20 40                               
[  46]    0362: 31 30 20 40 20 40 20 40 20 40 20 40   speed	dw 3031h, 18 dup(spaceBlue)
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40                               
[  47]    0388: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  48]    0428: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3043h, 306Fh, 306Eh, 3074h, 3072h, 306Fh, 306Ch, 3073h, 303Ah, 17 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                43 30 6F 30 6E 30 74 30 72 30 6F 30 
                6C 30 73 30 3A 30 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  49]    04C8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3057h, spaceBlue, 30C4h, spaceBlue, 3055h, 3070h, 3018h, 19 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                57 30 20 40 C4 30 20 40 55 30 70 30 
                18 30 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  50]    0568: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3053h, spaceBlue, 30C4h, spaceBlue, 3044h, 306Fh, 3077h, 306Eh, 3019h, 17 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                53 30 20 40 C4 30 20 40 44 30 6F 30 
                77 30 6E 30 19 30 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  51]    0608: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3041h, spaceBlue, 30C4h, spaceBlue, 304Ch, 3065h, 3066h, 3074h, 301Bh, 17 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                41 30 20 40 C4 30 20 40 4C 30 65 30 
                66 30 74 30 1B 30 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  52]    06A8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3044h, spaceBlue, 30C4h, spaceBlue, 3052h, 3069h, 3067h, 3068h, 3074h, 301Ah, 16 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                44 30 20 40 C4 30 20 40 52 30 69 30 
                67 30 68 30 74 30 1A 30 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  53]    0748: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3045h, 3073h, 3063h, spaceBlue, 30C4h, spaceBlue, 3045h, 3078h, 3069h, 3074h, 3021h, xSize - xField - 15 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                45 30 73 30 63 30 20 40 C4 30 20 40 
                45 30 78 30 69 30 74 30 21 30 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  54]    07E8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3018h, spaceBlue, 30C4h, spaceBlue, 3053h, 3070h, 3065h, 3065h, 3064h, spaceBlue, 3075h, 3070h, spaceBlue, 13 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                18 30 20 40 C4 30 20 40 53 30 70 30 
                65 30 65 30 64 30 20 40 75 30 70 30 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  55]    0888: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, spaceBlue, 3019h, spaceBlue, 30C4h, spaceBlue, 3053h, 3070h, 3065h, 3065h, 3064h, spaceBlue, 3064h, 306Fh, 3077h, 306Eh, 12 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                19 30 20 40 C4 30 20 40 53 30 70 30 
                65 30 65 30 64 30 20 40 64 30 6F 30 
                77 30 6E 30 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  56]    0928: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  57]    09C8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  58]    0A68: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  59]    0B08: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  60]    0BA8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  61]    0C48: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  62]    0CE8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  63]    0D88: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  64]    0E28: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  65]    0EC8: 20 40 BA 40 20 00 20 00 20 00 20 00   		dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 BA 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  66]    0F68: 20 40 C8 40 CD 40 CD 40 CD 40 CD 40   		dw spaceBlue, LeftBottomWallSpecialSymbol, xField dup(HWallSymbol), RightBottomWallSpecialSymbol, 27 dup(spaceBlue)
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 BC 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  67]    1008: 20 40 20 40 20 40 20 40 20 40 20 40   dw xSize dup(spaceBlue)
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40 20 40 20 40 20 40 20 40 
                20 40 20 40                         
[  68]        :                                       		
[  69]        :                                       
[  70]        :                                       widthOfEndScreen   equ 20     ;
[  71]        :                                       allWidth        equ 80     ;
[  72]        :                                       black           equ 0020h  ;
[  73]        :                                       white           equ 4020h  ;
[  74]        :                                       black           equ 0020h  ;
[  75]        :                                       
[  76]        :                                       blackVWallSymbol     equ 00FBAh
[  77]        :                                       blackHWallSymbol     equ 00FCDh
[  78]        :                                       
[  79]    10A8: C9 40 CD 40 CD 40 CD 40 CD 40 CD 40   theEnd      dw LeftTopWallSpecialSymbol, widthOfEndScreen-2 dup(HWallSymbol), RightTopWallSpecialSymbol
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 BB 40                         
[  80]    10D0: BA 40 20 00 20 00 20 00 20 00 20 00   			dw VWallSymbol, 18 dup(black), VWallSymbol
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 BA 40                         
[  81]    10F8: BA 40 20 00 20 00 20 00 20 00 20 00   			dw VWallSymbol, 5 dup(black) ,0F47h,0F61h,0F6Dh,0F65h,space, 0F6Fh,0F76h,0F65h,0F72h, 4 dup(black), VWallSymbol
                47 0F 61 0F 6D 0F 65 0F 20 00 6F 0F 
                76 0F 65 0F 72 0F 20 00 20 00 20 00 
                20 00 BA 40                         
[  82]    1120: BA 40 20 00 20 00 20 00 20 00 20 00   			dw VWallSymbol, 18 dup(black), VWallSymbol
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 20 00 20 00 20 00 20 00 20 00 
                20 00 BA 40                         
[  83]    1148: C8 40 CD 40 CD 40 CD 40 CD 40 CD 40   			dw LeftBottomWallSpecialSymbol, widthOfEndScreen-2 dup(HWallSymbol), RightBottomWallSpecialSymbol
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 CD 40 CD 40 CD 40 CD 40 CD 40 
                CD 40 BC 40                         
[  84]        :                                       			
[  85]        :                                       snakeMaxSize equ 30
[  86]    1170: 03                                    snakeSize db 3
[  87]        :                                       PointSize equ 2
[  88]        :                                       
[  89]    1171: 0D 1D 0D 1C 0D 1B 00 00 00 00 00 00   snakeBody dw 1D0Dh, 1C0Dh, 1B0Dh, snakeMaxSize-2 dup(0000h)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00                               
[  90]        :                                       
[  91]        :                                       brickWallSize equ 5
[  92]        :                                       
[  93]    11AF: 02 02 01 02 00 02 FF 01 FE 01         brickWall1 dw 0202h,  0201h, 0200h,  01FFh, 01FEh
[  94]    11B9: 02 02 02 01 02 00 02 FF 02 FE         brickWall2 dw 0202h,  0102h, 0002h, 0FF02h, 0FE02h
[  95]    11C3: FE 01 FE 00 FE FF FE FE FE FD         brickWall3 dw 01FEh,  00FEh, 0FFFEh, 0FEFEh, 0FDFEh
[  96]    11CD: 02 FE 01 FE 00 FE FF FD FE FD         brickWall4 dw 0FE02h,  0FE01h, 0FE00h, 0FDFFh, 0FDFEh
[  97]        :                                       
[  98]    11D7: 00 00 00 00 00 00 00 00 00 00         brickWallTemplate dw brickWallSize dup(0)
[  99]        :                                       
[ 100]    11E1: 00 00 00 00 00 00 00 00 00 00         brickWallTrue dw brickWallSize dup(0)
[ 101]        :                                       
[ 102]        :                                       stopVal     equ 00h
[ 103]        :                                       forwardVal  equ 01h
[ 104]        :                                       backwardVal equ -1
[ 105]        :                                       
[ 106]    11EB: 01                                    Bmoveright db 01h
[ 107]    11EC: 00                                    Bmovedown db 00h
[ 108]        :                                       
[ 109]        :                                       minWaitTime equ 1
[ 110]        :                                       maxWaitTime equ 9
[ 111]    11ED: 09 00                                 waitTime    dw maxWaitTime
[ 112]        :                                       deltaTime   equ 1
[ 113]        :                                       
[ 114]        :                                       .code
[ 115]        :                                       
[ 116]        :                                       clearScreen MACRO
[ 117]        :                                       	push ax
[ 118]        :                                       	mov ax, 0003h
[ 119]        :                                       	int 10h
[ 120]        :                                       	pop ax
[ 121]        :                                       ENDM
[ 122]        :                                       
[ 123]        :                                       
[ 124]    11F0:                                       main:
[ 125]    11F0: B8 10 00                              	mov ax, @data	
[ 126]    11F3: 8E D8                                 	mov ds, ax
[ 127]    11F5: A3 02 00                              	mov dataStart, ax
[ 128]    11F8: A1 00 00                              	mov ax, videoStart
[ 129]    11FB: 8E C0                                 	mov es, ax
[ 130]    11FD: 33 C0                                 	xor ax, ax
[ 131]        :                                       
[ 132]    11FF: 50 B8 03 00 CD 10 58                  	clearScreen
[ 133]    1206: E8 36 00                              	call HideCursor
[ 134]        :                                       
[ 135]    1209: E8 7A 00                              	call initAllScreen
[ 136]        :                                       
[ 137]    120C: E8 04 01                              	call mainGame
[ 138]        :                                       
[ 139]    120F:                                       to_close:
[ 140]    120F: E8 0F 00                              	call printEndScreen
[ 141]    1212: B4 07                                 	mov ah,7h
[ 142]    1214: CD 21                                 int 21h
[ 143]        :                                       
[ 144]    1216:                                       esc_exit:
[ 145]        :                                       
[ 146]    1216: 50 B8 03 00 CD 10 58                  	clearScreen
[ 147]        :                                       
[ 148]    121D: B4 4C                                 	mov ah, 4ch
[ 149]    121F: CD 21                                 	int 21h
[ 150]        :                                       
[ 151]        :                                       GetTimerValue MACRO
[ 152]        :                                       	push ax
[ 153]        :                                       
[ 154]        :                                       	mov ax, 00h
[ 155]        :                                       	int 1Ah
[ 156]        :                                       
[ 157]        :                                       	pop ax
[ 158]        :                                       ENDM
[ 159]        :                                       
[ 160]        :                                       
[ 161]    1221:                                       printEndScreen PROC
[ 162]    1221: 06                                    	push es
[ 163]    1222: 68 00 B8                              	push 0B800h
[ 164]        :                                       
[ 165]    1225: 07                                    	pop es
[ 166]        :                                       
[ 167]    1226: BF 72 06                              	mov di, 20*80 + 50
[ 168]    1229: BE A8 0F                              	mov si, offset theEnd
[ 169]    122C: B9 05 00                              	mov cx, 5
[ 170]    122F: FC                                    	cld
[ 171]    1230:                                       loopPrintEndScreen:
[ 172]        :                                       
[ 173]    1230: 51                                    	push cx
[ 174]        :                                       
[ 175]    1231: B9 14 00                              	mov cx, widthOfEndScreen
[ 176]    1234: F3 A5                                 	rep movsw
[ 177]        :                                       
[ 178]    1236: 83 C7 78                              	add di, 2*(allWidth - widthOfEndScreen)
[ 179]        :                                       
[ 180]    1239: 59                                    	pop cx
[ 181]    123A: E2 F4                                 	loop loopPrintEndScreen
[ 182]    123C: FD                                    std
[ 183]    123D: 07                                    	pop es
[ 184]    123E: C3                                    	ret                                        	
[ 185]        :                                       ENDP
[ 186]        :                                       
[ 187]    123F:                                       HideCursor proc
[ 188]    123F: 50                                    push ax
[ 189]    1240: 53                                    push bx
[ 190]    1241: 51                                    push cx
[ 191]    1242: B4 03                                 mov ah,3
[ 192]    1244: B7 00                                 mov bh,0
[ 193]    1246: CD 10                                 int 10h
[ 194]    1248: B5 20                                 mov ch,20h
[ 195]    124A: B4 01                                 mov ah,1
[ 196]    124C: CD 10                                 int 10h
[ 197]    124E: 59                                    pop cx
[ 198]    124F: 5B                                    pop bx
[ 199]    1250: 58                                    pop ax
[ 200]    1251: C3                                    ret
[ 201]        :                                       endp
[ 202]        :                                       
[ 203]    1252:                                       drawBrickWall PROC
[ 204]    1252: 51                                    push cx
[ 205]    1253: 53                                    push bx
[ 206]    1254: B9 05 00                              mov cx, brickWallSize
[ 207]        :                                       
[ 208]    1257: BE E1 10                              mov si, offset brickWallTrue
[ 209]    125A:                                       loopBrickWall:
[ 210]    125A: 8B 1C                                 	mov bx, [si]
[ 211]    125C: 83 C6 02                              	add si, PointSize        	
[ 212]        :                                       	
[ 213]    125F: E8 4B 00                              	call CalcOffsetByPoint
[ 214]        :                                       
[ 215]    1262: 8B FB                                 	mov di, bx
[ 216]        :                                       
[ 217]    1264: B8 23 30                              	mov ax, BWallSymbol
[ 218]    1267: AB                                    	stosw
[ 219]    1268: E2 F0                                 	loop loopBrickWall
[ 220]    126A: 5B                                    pop bx	
[ 221]    126B: 59                                    pop cx
[ 222]    126C: C3                                    ret
[ 223]        :                                       ENDP
[ 224]        :                                       
[ 225]    126D:                                       destroyWall PROC
[ 226]    126D: 51                                    push cx
[ 227]    126E: B9 05 00                              mov cx, brickWallSize
[ 228]        :                                       
[ 229]    1271: BE E1 10                              mov si, offset brickWallTrue
[ 230]    1274:                                       loopDestroyWall:
[ 231]    1274: 8B 1C                                 	mov bx, [si]
[ 232]    1276: 83 C6 02                              	add si, PointSize        	
[ 233]    1279: E8 31 00                              	call CalcOffsetByPoint
[ 234]    127C: 8B FB                                 	mov di, bx
[ 235]    127E: B8 20 00                              	mov ax, space
[ 236]    1281: AB                                    	stosw
[ 237]    1282: E2 F0                                 	loop loopDestroyWall    	
[ 238]    1284: 59                                    pop cx
[ 239]    1285: C3                                    ret
[ 240]        :                                       ENDP
[ 241]        :                                       
[ 242]    1286:                                       initAllScreen PROC
[ 243]    1286: BE 08 00                              	mov si, offset screen
[ 244]    1289: 33 FF                                 	xor di, di
[ 245]    128B: B9 D0 07                              	mov cx, xSize*ySize
[ 246]    128E: F3 A5                                 	rep movsw
[ 247]        :                                       
[ 248]    1290: 32 ED                                 	xor ch, ch
[ 249]    1292: 8A 0E 70 10                           	mov cl, snakeSize
[ 250]    1296: BE 71 10                              	mov si, offset snakeBody
[ 251]        :                                       
[ 252]    1299:                                       loopInitSnake:
[ 253]    1299: 8B 1C                                 	mov bx, [si]
[ 254]    129B: 83 C6 02                              	add si, PointSize
[ 255]        :                                       	
[ 256]    129E: E8 0C 00                              	call CalcOffsetByPoint
[ 257]        :                                       
[ 258]    12A1: 8B FB                                 	mov di, bx
[ 259]        :                                       
[ 260]    12A3: B8 11 0A                              	mov ax, snakeBodySymbol
[ 261]    12A6: AB                                    	stosw
[ 262]        :                                       
[ 263]    12A7: E2 F0                                 	loop loopInitSnake
[ 264]        :                                       
[ 265]    12A9: E8 CF 01                              	call GenerateRandomApple
[ 266]        :                                       
[ 267]    12AC: C3                                    	ret
[ 268]        :                                       ENDP
[ 269]        :                                       
[ 270]    12AD:                                       CalcOffsetByPoint PROC
[ 271]        :                                       
[ 272]    12AD: 50                                    	push ax
[ 273]    12AE: 52                                    	push dx
[ 274]        :                                       	
[ 275]    12AF: 32 E4                                 	xor ah, ah
[ 276]    12B1: 8A C3                                 	mov al, bl
[ 277]    12B3: B2 50                                 	mov dl, xSize
[ 278]    12B5: F6 E2                                 	mul dl
[ 279]    12B7: 8A D7                                 	mov dl, bh
[ 280]    12B9: 32 F6                                 	xor dh, dh
[ 281]    12BB: 03 C2                                 	add ax, dx
[ 282]    12BD: BA 02 00                              	mov dx, videoBufferCellSize	
[ 283]    12C0: F7 E2                                 	mul dx
[ 284]    12C2: 8B D8                                 	mov bx, ax
[ 285]        :                                       
[ 286]    12C4: 5A                                    	pop dx
[ 287]    12C5: 58                                    	pop ax
[ 288]    12C6: C3                                    	ret
[ 289]        :                                       ENDP
[ 290]        :                                       
[ 291]    12C7:                                       MoveSnake PROC
[ 292]    12C7: 50                                    	push ax
[ 293]    12C8: 53                                    	push bx
[ 294]    12C9: 51                                    	push cx
[ 295]    12CA: 56                                    	push si
[ 296]    12CB: 57                                    	push di
[ 297]    12CC: 06                                    	push es
[ 298]        :                                       
[ 299]    12CD: 33 C0                                 xor ax, ax
[ 300]    12CF: A0 70 10                              	mov al, snakeSize
[ 301]    12D2: 8B C8                                 	mov cx, ax
[ 302]    12D4: BB 02 00                              	mov bx, PointSize
[ 303]    12D7: F7 E3                                 	mul bx			
[ 304]    12D9: BF 71 10                              	mov di, offset snakeBody
[ 305]    12DC: 03 F8                                 	add di, ax 		
[ 306]    12DE: 8B F7                                 	mov si, di
[ 307]    12E0: 83 EE 02                              	sub si, PointSize 	
[ 308]        :                                       
[ 309]    12E3: 57                                    	push di
[ 310]        :                                       	
[ 311]    12E4: 8E 06 00 00                           	mov es, videoStart
[ 312]    12E8: 3E 8B 1C                              	mov bx, ds:[si]
[ 313]    12EB: E8 BF FF                              	call CalcOffsetByPoint
[ 314]    12EE: 8B FB                                 	mov di, bx			
[ 315]    12F0: B8 20 00                              	mov ax, space
[ 316]    12F3: AB                                    	stosw
[ 317]        :                                       
[ 318]    12F4: 5F                                    	pop di
[ 319]        :                                       
[ 320]    12F5: 8E 06 02 00                           	mov es, dataStart	
[ 321]    12F9: FD                                    	std				
[ 322]    12FA: F3 A5                                 	rep movsw
[ 323]    12FC: 8B 1E 71 10                           	mov bx, snakeBody 	
[ 324]        :                                       
[ 325]    1300: 02 3E EB 10                           	add bh, Bmoveright
[ 326]    1304: 02 1E EC 10                           	add bl, Bmovedown	
[ 327]    1308: 89 1E 71 10                           	mov snakeBody, bx	
[ 328]        :                                       	
[ 329]    130C: 07                                    	pop es
[ 330]    130D: 5F                                    	pop di
[ 331]    130E: 5E                                    	pop si
[ 332]    130F: 59                                    	pop cx
[ 333]    1310: 5B                                    	pop bx
[ 334]    1311: 58                                    	pop ax
[ 335]    1312: C3                                    	ret
[ 336]        :                                       ENDP
[ 337]        :                                       
[ 338]    1313:                                       mainGame PROC
[ 339]    1313: 50                                    	push ax
[ 340]    1314: 53                                    	push bx
[ 341]    1315: 51                                    	push cx
[ 342]    1316: 52                                    	push dx
[ 343]    1317: 1E                                    	push ds
[ 344]    1318: 06                                    	push es
[ 345]        :                                       
[ 346]    1319:                                       checkAndMoveLoop:
[ 347]    1319: B4 01                                 	mov ah, 01h
[ 348]    131B: CD 16                                 	int 16h
[ 349]    131D: 75 03                                 	jnz checkEnteredSymbol
[ 350]    131F: E9 BC 00                              	jmp noSymbolInBuff
[ 351]        :                                       
[ 352]    1322:                                       checkEnteredSymbol:
[ 353]    1322: B4 00                                 mov ah, 00h
[ 354]    1324: CD 16                                 	int 16h
[ 355]    1326: 80 FC 01                              	cmp ah, KExit		
[ 356]    1329: 75 03                                 	jne skipJmp
[ 357]        :                                       
[ 358]    132B: E9 E8 FE                              	jmp esc_exit
[ 359]        :                                       
[ 360]    132E:                                       skipJmp:
[ 361]    132E: 80 FC 1E                              	cmp ah, KMoveLeft	
[ 362]    1331: 74 1C                                 	je setMoveLeft
[ 363]        :                                       
[ 364]    1333: 80 FC 20                              	cmp ah, KMoveRight	
[ 365]    1336: 74 2D                                 	je setMoveRight
[ 366]        :                                       
[ 367]    1338: 80 FC 11                              	cmp ah, KMoveUp		
[ 368]    133B: 74 3D                                 	je setMoveUp
[ 369]        :                                       
[ 370]    133D: 80 FC 1F                              	cmp ah, KMoveDown	
[ 371]    1340: 74 4D                                 	je setMoveDown
[ 372]        :                                       
[ 373]    1342: 80 FC 48                              	cmp ah, KUpSpeed		
[ 374]    1345: 74 5D                                 	je setSpeedUp
[ 375]        :                                       
[ 376]    1347: 80 FC 50                              	cmp ah, KDownSpeed	
[ 377]    134A: 74 76                                 	je setSpeedDown
[ 378]        :                                       
[ 379]    134C: E9 8F 00                              	jmp noSymbolInBuff
[ 380]        :                                       
[ 381]    134F:                                       setMoveLeft:
[ 382]    134F: A0 EB 10                              mov al, Bmoveright
[ 383]    1352: 3C 01                                 cmp al, forwardVal
[ 384]    1354: 75 03                                 jne setMoveLeft_ok
[ 385]    1356: E9 85 00                              jmp noSymbolInBuff
[ 386]        :                                       
[ 387]    1359:                                       setMoveLeft_ok:
[ 388]        :                                       
[ 389]    1359: C6 06 EB 10 FF                        	mov Bmoveright, backwardVal
[ 390]    135E: C6 06 EC 10 00                        	mov Bmovedown,  stopVal
[ 391]    1363: EB 79                                 	jmp noSymbolInBuff
[ 392]        :                                       
[ 393]    1365:                                       setMoveRight:
[ 394]    1365: A0 EB 10                              mov al, Bmoveright
[ 395]    1368: 3C FF                                 cmp al, backwardVal
[ 396]    136A: 75 02                                 jne setMoveRight_ok
[ 397]    136C: EB 70                                 jmp noSymbolInBuff
[ 398]        :                                       
[ 399]    136E:                                       setMoveRight_ok:
[ 400]        :                                       
[ 401]    136E: C6 06 EB 10 01                        	mov Bmoveright, forwardVal
[ 402]    1373: C6 06 EC 10 00                        	mov Bmovedown, stopVal
[ 403]    1378: EB 64                                 	jmp noSymbolInBuff
[ 404]        :                                       
[ 405]    137A:                                       setMoveUp:
[ 406]    137A: A0 EC 10                              mov al, Bmovedown
[ 407]    137D: 3C 01                                 cmp al, forwardVal
[ 408]    137F: 75 02                                 jne setMoveUp_ok
[ 409]    1381: EB 5B                                 jmp noSymbolInBuff
[ 410]        :                                       
[ 411]    1383:                                       setMoveUp_ok:
[ 412]        :                                       
[ 413]    1383: C6 06 EB 10 00                        	mov Bmoveright, stopVal
[ 414]    1388: C6 06 EC 10 FF                        	mov Bmovedown, backwardVal
[ 415]    138D: EB 4F                                 	jmp noSymbolInBuff
[ 416]        :                                       
[ 417]    138F:                                       setMoveDown:
[ 418]    138F: A0 EC 10                              mov al, Bmovedown
[ 419]    1392: 3C FF                                 cmp al, backwardVal
[ 420]    1394: 75 02                                 jne setMoveDown_ok
[ 421]    1396: EB 46                                 jmp noSymbolInBuff
[ 422]        :                                       
[ 423]    1398:                                       setMoveDown_ok:
[ 424]        :                                       
[ 425]    1398: C6 06 EB 10 00                        	mov Bmoveright, stopVal
[ 426]    139D: C6 06 EC 10 01                        	mov Bmovedown, forwardVal
[ 427]    13A2: EB 3A                                 	jmp noSymbolInBuff
[ 428]        :                                       
[ 429]    13A4:                                       setSpeedUp:
[ 430]    13A4: A1 ED 10                              	mov ax, waitTime
[ 431]    13A7: 3D 01 00                              	cmp ax, minWaitTime
[ 432]    13AA: 74 32                                 	je noSymbolInBuff			
[ 433]        :                                       	
[ 434]    13AC: 2D 01 00                              	sub ax, deltaTime
[ 435]    13AF: A3 ED 10                              	mov waitTime, ax 			
[ 436]        :                                       
[ 437]    13B2: 8E 06 00 00                           	mov es, videoStart
[ 438]    13B6: BF 5A 02                              	mov di, offset speed - offset screen	
[ 439]    13B9: 26 8B 05                              	mov ax, es:[di]
[ 440]    13BC: 40                                    	inc ax
[ 441]    13BD: 26 89 05                              	mov es:[di], ax
[ 442]        :                                       
[ 443]    13C0: EB 1C                                 	jmp noSymbolInBuff
[ 444]        :                                       
[ 445]    13C2:                                       setSpeedDown:
[ 446]    13C2: A1 ED 10                              	mov ax, waitTime
[ 447]    13C5: 3D 09 00                              	cmp ax, maxWaitTime
[ 448]    13C8: 74 14                                 	je noSymbolInBuff			
[ 449]        :                                       	
[ 450]    13CA: 05 01 00                              	add ax, deltaTime
[ 451]    13CD: A3 ED 10                              	mov waitTime, ax 			
[ 452]        :                                       
[ 453]    13D0: 8E 06 00 00                           	mov es, videoStart
[ 454]    13D4: BF 5A 02                              	mov di, offset speed - offset screen
[ 455]    13D7: 26 8B 05                              	mov ax, es:[di]
[ 456]    13DA: 48                                    	dec ax
[ 457]    13DB: 26 89 05                              	mov es:[di], ax
[ 458]        :                                       
[ 459]    13DE:                                       noSymbolInBuff:
[ 460]    13DE: E8 E6 FE                              	call MoveSnake
[ 461]        :                                       
[ 462]    13E1: 8B 1E 71 10                           	mov bx, snakeBody 		
[ 463]        :                                       	
[ 464]    13E5:                                       checkSymbolAgain:
[ 465]    13E5: E8 C5 FE                              	call CalcOffsetByPoint	
[ 466]        :                                       
[ 467]    13E8: 8E 06 00 00                           	mov es, videoStart
[ 468]    13EC: 26 8B 07                              	mov ax, es:[bx]		
[ 469]        :                                       
[ 470]    13EF: 3D 25 0B                              	cmp ax, appleSymbol
[ 471]    13F2: 74 16                                 	je AppleIsNext
[ 472]        :                                       
[ 473]    13F4: 3D 11 0A                              	cmp ax, snakeBodySymbol
[ 474]    13F7: 74 1F                                 	je SnakeIsNext
[ 475]        :                                       
[ 476]    13F9: 3D CD 40                              	cmp ax, HWallSymbol
[ 477]    13FC: 74 1C                                 	je PortalUpDown
[ 478]        :                                       
[ 479]    13FE: 3D BA 40                              	cmp ax, VWallSymbol
[ 480]    1401: 74 2C                                 	je PortalLeftRight
[ 481]        :                                       	
[ 482]    1403: 3D 23 30                              	cmp ax, BWallSymbol
[ 483]    1406: 74 10                                 	je SnakeIsNext
[ 484]        :                                       
[ 485]    1408: EB 36                                 	jmp GoNextIteration
[ 486]        :                                       
[ 487]    140A:                                       AppleIsNext:
[ 488]    140A: E8 60 FE                              call destroyWall
[ 489]    140D: E8 3A 01                              	call incSnake
[ 490]    1410: E8 68 00                              	call GenerateRandomApple
[ 491]    1413: E8 67 01                              	call incScore
[ 492]    1416: EB 28                                 	jmp GoNextIteration
[ 493]    1418:                                       SnakeIsNext:
[ 494]    1418: EB 39                                 	jmp endLoop
[ 495]    141A:                                       PortalUpDown:
[ 496]    141A: 8B 1E 71 10                           	mov bx, snakeBody
[ 497]    141E: 80 EB 15                              	sub bl, yField
[ 498]    1421: 80 FB 00                              	cmp bl, 0		
[ 499]    1424: 7F 03                                 	jg writeNewHeadPos
[ 500]        :                                       	
[ 501]    1426: 80 C3 2A                              	add bl, yField*2
[ 502]        :                                       
[ 503]    1429:                                       writeNewHeadPos:
[ 504]    1429: 89 1E 71 10                           	mov snakeBody, bx	
[ 505]    142D: EB B6                                 	jmp checkSymbolAgain	
[ 506]        :                                       	
[ 507]    142F:                                       PortalLeftRight:
[ 508]    142F: 8B 1E 71 10                           	mov bx, snakeBody
[ 509]    1433: 80 EF 32                              	sub bh, xField
[ 510]    1436: 80 FF 00                              	cmp bh, 0		
[ 511]    1439: 7F EE                                 	jg writeNewHeadPos
[ 512]        :                                       
[ 513]    143B: 80 C7 64                              	add bh, xField*2
[ 514]    143E: EB E9                                 	jmp writeNewHeadPos
[ 515]        :                                       
[ 516]    1440:                                       GoNextIteration:
[ 517]    1440: 8B 1E 71 10                           	mov bx, snakeBody		
[ 518]    1444: E8 66 FE                              	call CalcOffsetByPoint
[ 519]    1447: 8B FB                                 	mov di, bx
[ 520]    1449: B8 11 0A                              	mov ax, snakeBodySymbol
[ 521]    144C: AB                                    	stosw
[ 522]        :                                       
[ 523]    144D: E8 0A 00                              	call Sleep
[ 524]        :                                       
[ 525]    1450: E9 C6 FE                              	jmp checkAndMoveLoop
[ 526]        :                                       
[ 527]    1453:                                       endLoop:
[ 528]    1453: 07                                    	pop es
[ 529]    1454: 1F                                    	pop ds
[ 530]    1455: 5A                                    	pop dx
[ 531]    1456: 59                                    	pop cx
[ 532]    1457: 5B                                    	pop bx
[ 533]    1458: 58                                    	pop ax
[ 534]    1459: C3                                    	ret
[ 535]        :                                       ENDP
[ 536]        :                                       
[ 537]    145A:                                       Sleep PROC
[ 538]    145A: 50                                    	push ax
[ 539]    145B: 53                                    	push bx
[ 540]    145C: 51                                    	push cx
[ 541]    145D: 52                                    	push dx
[ 542]        :                                       
[ 543]    145E: 50 B8 00 00 CD 1A 58                  	GetTimerValue
[ 544]        :                                       
[ 545]    1465: 03 16 ED 10                           	add dx, waitTime
[ 546]    1469: 8B DA                                 	mov bx, dx
[ 547]        :                                       
[ 548]    146B:                                       checkTimeLoop:
[ 549]    146B: 50 B8 00 00 CD 1A 58                  	GetTimerValue
[ 550]    1472: 3B D3                                 	cmp dx, bx			
[ 551]    1474: 7C F5                                 	jl checkTimeLoop
[ 552]        :                                       
[ 553]    1476: 5A                                    	pop dx
[ 554]    1477: 59                                    	pop cx
[ 555]    1478: 5B                                    	pop bx
[ 556]    1479: 58                                    	pop ax
[ 557]    147A: C3                                    	ret
[ 558]        :                                       ENDP
[ 559]        :                                       
[ 560]    147B:                                       GenerateRandomApple PROC
[ 561]    147B: 50                                    	push ax
[ 562]    147C: 53                                    	push bx
[ 563]    147D: 51                                    	push cx
[ 564]    147E: 52                                    	push dx
[ 565]    147F: 06                                    	push es
[ 566]        :                                       	
[ 567]    1480: B4 2C                                 	mov ah, 2Ch
[ 568]    1482: CD 21                                 	int 21h
[ 569]        :                                       	
[ 570]    1484: 8A C2                                 	mov al, dl
[ 571]    1486: F6 E6                                 mul dh
[ 572]        :                                       	
[ 573]    1488: 33 D2                                 	xor dx, dx
[ 574]        :                                       	
[ 575]    148A: B9 04 00                              	mov cx, 04h
[ 576]    148D: F7 F1                                 	div cx
[ 577]    148F: 8A FA                                 	mov bh, dl
[ 578]        :                                       	
[ 579]    1491: 80 FF 00                              	cmp bh, 0
[ 580]    1494: 75 05                                 	jne rnd1
[ 581]    1496: BE AF 10                              	mov si, offset brickWall1
[ 582]    1499: EB 19                                 	jmp writeToTemplate
[ 583]        :                                       	
[ 584]    149B:                                       	rnd1:
[ 585]        :                                       	
[ 586]    149B: 80 FF 01                              	cmp bh, 1
[ 587]    149E: 75 05                                 	jne rnd2
[ 588]    14A0: BE B9 10                              	mov si, offset brickWall2
[ 589]    14A3: EB 0F                                 	jmp writeToTemplate
[ 590]        :                                       	
[ 591]    14A5:                                       	rnd2:
[ 592]        :                                       	
[ 593]    14A5: 80 FF 02                              	cmp bh, 2
[ 594]    14A8: 75 05                                 	jne rnd3
[ 595]    14AA: BE C3 10                              	mov si, offset brickWall3
[ 596]    14AD: EB 05                                 	jmp writeToTemplate
[ 597]        :                                       	
[ 598]    14AF:                                       	rnd3:
[ 599]        :                                       	
[ 600]    14AF: BE CD 10                              	mov si, offset brickWall4
[ 601]    14B2: EB 00                                 	jmp writeToTemplate
[ 602]        :                                       	
[ 603]    14B4:                                       	writeToTemplate:
[ 604]    14B4: BF D7 10                              	mov di, offset brickWallTemplate
[ 605]    14B7: B9 05 00                              	mov cx, brickWallSize
[ 606]        :                                       	
[ 607]    14BA: 50                                    	push ax
[ 608]    14BB:                                       	movswToTemplate:	
[ 609]    14BB: 8B 04                                 	    mov ax, [si]
[ 610]    14BD: 89 05                                 	    mov [di],ax	
[ 611]    14BF: 83 C7 02                              	    add di, 2
[ 612]    14C2: 83 C6 02                              	    add si, 2
[ 613]    14C5: E2 F4                                 	loop movswToTemplate
[ 614]    14C7: 58                                    	pop ax
[ 615]        :                                       	
[ 616]    14C8:                                       generateRandomApplePosition:
[ 617]    14C8: B4 2C                                 	mov ah, 2Ch
[ 618]    14CA: CD 21                                 	int 21h
[ 619]        :                                       	
[ 620]    14CC: 8A C2                                 	mov al, dl
[ 621]    14CE: F6 E6                                 	mul dh 				
[ 622]        :                                       
[ 623]    14D0: 33 D2                                 	xor dx, dx			
[ 624]    14D2: B9 32 00                              	mov cx, xField
[ 625]    14D5: F7 F1                                 	div cx				
[ 626]    14D7: 83 C2 02                              	add dx, 2			
[ 627]    14DA: 8A FA                                 	mov bh, dl 		
[ 628]        :                                       
[ 629]    14DC: 33 D2                                 	xor dx, dx
[ 630]    14DE: B9 15 00                              	mov cx, yField
[ 631]    14E1: F7 F1                                 	div cx
[ 632]    14E3: 83 C2 02                              	add dx, 2			
[ 633]    14E6: 8A DA                                 	mov bl, dl 			
[ 634]        :                                       
[ 635]    14E8: 53                                    push bx
[ 636]    14E9: E8 C1 FD                              	call CalcOffsetByPoint
[ 637]    14EC: 8E 06 00 00                           	mov es, videoStart
[ 638]    14F0: 26 8B 07                              	mov ax, es:[bx]
[ 639]    14F3: 5B                                    pop bx
[ 640]        :                                       
[ 641]    14F4: 3D 20 00                              	cmp ax, space
[ 642]    14F7: 75 CF                                 	jne generateRandomApplePosition	
[ 643]        :                                       	
[ 644]    14F9: B9 05 00                              mov cx, brickWallSize
[ 645]    14FC: BE D7 10                              mov si, offset brickWallTemplate
[ 646]        :                                       
[ 647]    14FF:                                       checkWallPlace:
[ 648]    14FF: 53                                    push bx
[ 649]    1500: 03 1C                                 	    add bx, [si]
[ 650]        :                                       
[ 651]    1502: 53                                    push bx
[ 652]    1503: E8 A7 FD                              	    call CalcOffsetByPoint
[ 653]    1506: 8E 06 00 00                           	    mov es, videoStart
[ 654]    150A: 26 8B 07                              	    mov ax, es:[bx]
[ 655]    150D: 5B                                    pop bx
[ 656]        :                                       
[ 657]    150E: 5B                                    pop bx
[ 658]        :                                       	
[ 659]    150F: 3D 20 00                              	    cmp ax, space
[ 660]        :                                       
[ 661]    1512: 75 B4                                 	    jne generateRandomApplePosition
[ 662]        :                                       	
[ 663]    1514: 83 C6 02                              	    add si, PointSize
[ 664]    1517: E2 E6                                 	loop checkWallPlace
[ 665]        :                                       	
[ 666]    1519: B9 05 00                              mov cx, brickWallSize
[ 667]    151C: BE D7 10                              mov si, offset brickWallTemplate
[ 668]    151F: BF E1 10                              mov di, offset brickWallTrue
[ 669]        :                                       	
[ 670]    1522: 50                                    	push ax
[ 671]    1523:                                       	copyTrueCoordinateOfWall:
[ 672]    1523: 8B 04                                 	    mov ax, [si]
[ 673]    1525: 03 C3                                 	    add ax, bx
[ 674]    1527: 89 05                                 	    mov [di], ax
[ 675]        :                                       	
[ 676]    1529: 83 C6 02                              	    add si, PointSize
[ 677]    152C: 83 C7 02                              	    add di, PointSize
[ 678]    152F: E2 F2                                 	loop copyTrueCoordinateOfWall
[ 679]    1531: 58                                    	pop ax
[ 680]        :                                       	
[ 681]    1532: E8 1D FD                              	call drawBrickWall
[ 682]        :                                       	
[ 683]    1535: 53                                    	push bx
[ 684]    1536: E8 74 FD                              	call CalcOffsetByPoint
[ 685]    1539: 8E 06 00 00                           	mov es, videoStart
[ 686]    153D: B8 25 0B                              	mov ax, appleSymbol;
[ 687]    1540: 26 89 07                              	mov es:[bx], ax
[ 688]    1543: 5B                                    pop bx
[ 689]        :                                       
[ 690]    1544: 07                                    	pop es
[ 691]    1545: 5A                                    	pop dx
[ 692]    1546: 59                                    	pop cx
[ 693]    1547: 5B                                    	pop bx
[ 694]    1548: 58                                    	pop ax
[ 695]    1549: C3                                    	ret
[ 696]        :                                       ENDP
[ 697]        :                                       
[ 698]    154A:                                       incSnake PROC
[ 699]    154A: 50                                    	push ax
[ 700]    154B: 53                                    	push bx
[ 701]    154C: 57                                    	push di
[ 702]    154D: 06                                    	push es
[ 703]        :                                       
[ 704]    154E: A0 70 10                              	mov al, snakeSize
[ 705]    1551: 3C 1E                                 	cmp al, snakeMaxSize
[ 706]    1553: 74 23                                 	je return
[ 707]    1555: FE C0                                 	inc al
[ 708]    1557: A2 70 10                              	mov snakeSize, al
[ 709]    155A: FE C8                                 	dec al 				
[ 710]        :                                       	
[ 711]    155C: B3 02                                 	mov bl, PointSize
[ 712]    155E: F6 E3                                 	mul bl 				
[ 713]        :                                       
[ 714]    1560: BF 71 10                              	mov di, offset snakeBody
[ 715]    1563: 03 F8                                 	add di, ax 			
[ 716]        :                                       
[ 717]    1565: 8E 06 02 00                           	mov es, dataStart
[ 718]    1569: 26 8B 1D                              	mov bx, es:[di]
[ 719]        :                                       	
[ 720]    156C: E8 3E FD                              	call CalcOffsetByPoint
[ 721]    156F: 8E 06 00 00                           	mov es, videoStart
[ 722]    1573: 26 C7 07 11 0A                        	mov es:[bx], snakeBodySymbol
[ 723]        :                                       	
[ 724]    1578:                                       return:
[ 725]    1578: 07                                    	pop es
[ 726]    1579: 5F                                    	pop di
[ 727]    157A: 5B                                    	pop bx
[ 728]    157B: 58                                    	pop ax
[ 729]    157C: C3                                    	ret
[ 730]        :                                       ENDP
[ 731]        :                                       
[ 732]    157D:                                       incScore PROC
[ 733]    157D: 50                                    	push ax
[ 734]    157E: 06                                    	push es
[ 735]    157F: 56                                    	push si
[ 736]    1580: 57                                    	push di
[ 737]    1581: 8E 06 00 00                           	mov es, videoStart
[ 738]    1585: B9 04 00                              	mov cx, scoreSize 	
[ 739]    1588: BF C0 01                              	mov di, offset score + (scoreSize - 1) * videoBufferCellSize - offset screen
[ 740]        :                                       
[ 741]    158B:                                       loop_score:	
[ 742]    158B: 26 8B 05                              	mov ax, es:[di]
[ 743]    158E: 3C 39                                 	cmp al, '9'			
[ 744]    1590: 75 0C                                 	jne nineNotNow
[ 745]        :                                       	
[ 746]    1592: 2C 09                                 	sub al, 9			
[ 747]    1594: 26 89 05                              	mov es:[di], ax
[ 748]        :                                       
[ 749]    1597: 83 EF 02                              	sub di, videoBufferCellSize
[ 750]        :                                       
[ 751]    159A: E2 EF                                 	loop loop_score
[ 752]    159C: EB 04                                 	jmp return_incScore
[ 753]        :                                       
[ 754]    159E:                                       nineNotNow:
[ 755]    159E: 40                                    	inc ax
[ 756]    159F: 26 89 05                              	mov es:[di], ax
[ 757]    15A2:                                       return_incScore:
[ 758]    15A2: 5F                                    	pop di
[ 759]    15A3: 5E                                    	pop si
[ 760]    15A4: 07                                    	pop es
[ 761]    15A5: 58                                    	pop ax
[ 762]    15A6: C3                                    	ret
[ 763]        :                                       ENDP
[ 764]        :                                       end main
[ 765]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A7      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 0C      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 8B      -   check sum (l.byte)
0013: 02      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 1F      -   CS - code segment (l.byte)
0017: 01      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 1F      -   relocation table - segment anchor (l.byte)
0021: 01      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
