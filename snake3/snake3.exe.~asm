.model small
.stack 100h
.data

KUpSpeed    equ 48h
KDownSpeed  equ 50h
KMoveUp     equ 11h
KMoveDown   equ 1Fh
KMoveLeft   equ 1Eh
KMoveRight  equ 20h
KExit       equ 01h

xSize       equ 80
ySize       equ 25
xField      equ 50
yField      equ 21
videoBufferCellSize equ 2
scoreSize equ 4

videoStart   dw 0B800h
dataStart    dw 0000h
timeStart    dw 0040h
timePosition dw 006Ch

space equ 0020h
spaceBlue equ 4020h ; (3020h), 4020h-red,
snakeBodySymbol    equ 0A11h ; 0A10h
appleSymbol        equ 0B25h      ;0B15h
VWallSymbol        equ 40BAh     ;30BAh
HWallSymbol        equ 40CDh       ;30CDh
BWallSymbol        equ 3023h     ;4023h

LeftTopWallSpecialSymbol equ 40C9h  ;30C9h
LeftBottomWallSpecialSymbol equ 40C8h  ;30C8h
RightTopWallSpecialSymbol equ 40BBh    ;30BBh
RightBottomWallSpecialSymbol equ 40BCh  ;30BCh

fieldSpacingBad equ spaceBlue, VWallSymbol, xField dup(space)
fieldSpacing equ fieldSpacingBad, VWallSymbol

screen    dw xSize dup(spaceBlue)
dw spaceBlue, LeftTopWallSpecialSymbol, xField dup(HWallSymbol), RightTopWallSpecialSymbol, 27 dup (spaceBlue)
dw fieldSpacing, spaceBlue, 3053h, 3063h, 306Fh, 3072h, 3065h, 303Ah, spaceBlue
score    dw scoreSize dup(3030h), xSize - xField - scoreSize - 11 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3053h, 3070h, 2 dup(3065h), 3064h, 303Ah, spaceBlue
speed    dw 3031h, 18 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3043h, 306Fh, 306Eh, 3074h, 3072h, 306Fh, 306Ch, 3073h, 303Ah, 17 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3057h, spaceBlue, 30C4h, spaceBlue, 3055h, 3070h, 3018h, 19 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3053h, spaceBlue, 30C4h, spaceBlue, 3044h, 306Fh, 3077h, 306Eh, 3019h, 17 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3041h, spaceBlue, 30C4h, spaceBlue, 304Ch, 3065h, 3066h, 3074h, 301Bh, 17 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3044h, spaceBlue, 30C4h, spaceBlue, 3052h, 3069h, 3067h, 3068h, 3074h, 301Ah, 16 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3045h, 3073h, 3063h, spaceBlue, 30C4h, spaceBlue, 3045h, 3078h, 3069h, 3074h, 3021h, xSize - xField - 15 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3018h, spaceBlue, 30C4h, spaceBlue, 3053h, 3070h, 3065h, 3065h, 3064h, spaceBlue, 3075h, 3070h, spaceBlue, 13 dup(spaceBlue)
dw fieldSpacing, spaceBlue, 3019h, spaceBlue, 30C4h, spaceBlue, 3053h, 3070h, 3065h, 3065h, 3064h, spaceBlue, 3064h, 306Fh, 3077h, 306Eh, 12 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw fieldSpacing, xSize - xField - 3 dup(spaceBlue)
dw spaceBlue, LeftBottomWallSpecialSymbol, xField dup(HWallSymbol), RightBottomWallSpecialSymbol, 27 dup(spaceBlue)
dw xSize dup(spaceBlue)


widthOfEndScreen   equ 20     ;
allWidth        equ 80     ;
black           equ 0020h  ;
white           equ 4020h  ;
black           equ 0020h  ;

blackVWallSymbol     equ 00FBAh
blackHWallSymbol     equ 00FCDh

theEnd      dw LeftTopWallSpecialSymbol, widthOfEndScreen-2 dup(HWallSymbol), RightTopWallSpecialSymbol
dw VWallSymbol, 18 dup(black), VWallSymbol
dw VWallSymbol, 5 dup(black) ,0F47h,0F61h,0F6Dh,0F65h,space, 0F6Fh,0F76h,0F65h,0F72h, 4 dup(black), VWallSymbol
dw VWallSymbol, 18 dup(black), VWallSymbol
dw LeftBottomWallSpecialSymbol, widthOfEndScreen-2 dup(HWallSymbol), RightBottomWallSpecialSymbol

snakeMaxSize equ 30
snakeSize db 3
PointSize equ 2

snakeBody dw 1D0Dh, 1C0Dh, 1B0Dh, snakeMaxSize-2 dup(0000h)

brickWallSize equ 5

brickWall1 dw 0202h,  0201h, 0200h,  01FFh, 01FEh
brickWall2 dw 0202h,  0102h, 0002h, 0FF02h, 0FE02h
brickWall3 dw 01FEh,  00FEh, 0FFFEh, 0FEFEh, 0FDFEh
brickWall4 dw 0FE02h,  0FE01h, 0FE00h, 0FDFFh, 0FDFEh

brickWallTemplate dw brickWallSize dup(0)

brickWallTrue dw brickWallSize dup(0)

stopVal     equ 00h
forwardVal  equ 01h
backwardVal equ -1

Bmoveright db 01h
Bmovedown db 00h

minWaitTime equ 1
maxWaitTime equ 9
waitTime    dw maxWaitTime
deltaTime   equ 1

.code

clearScreen MACRO
push ax
mov ax, 0003h
int 10h
pop ax
ENDM


main:
mov ax, @data
mov ds, ax
mov dataStart, ax
mov ax, videoStart
mov es, ax
xor ax, ax

clearScreen
call HideCursor

call initAllScreen

call mainGame

to_close:
call printEndScreen
mov ah,7h
int 21h

esc_exit:

clearScreen

mov ah, 4ch
int 21h

GetTimerValue MACRO
push ax

mov ax, 00h
int 1Ah

pop ax
ENDM


printEndScreen PROC
push es
push 0B800h

pop es

mov di, 20*80 + 50
mov si, offset theEnd
mov cx, 5
cld
loopPrintEndScreen:

push cx

mov cx, widthOfEndScreen
rep movsw

add di, 2*(allWidth - widthOfEndScreen)

pop cx
loop loopPrintEndScreen
std
pop es
ret
ENDP

HideCursor proc
push ax
push bx
push cx
mov ah,3
mov bh,0
int 10h
mov ch,20h
mov ah,1
int 10h
pop cx
pop bx
pop ax
ret
endp

drawBrickWall PROC
push cx
push bx
mov cx, brickWallSize

mov si, offset brickWallTrue
loopBrickWall:
mov bx, [si]
add si, PointSize

call CalcOffsetByPoint

mov di, bx

mov ax, BWallSymbol
stosw
loop loopBrickWall
pop bx
pop cx
ret
ENDP

destroyWall PROC
push cx
mov cx, brickWallSize

mov si, offset brickWallTrue
loopDestroyWall:
mov bx, [si]
add si, PointSize
call CalcOffsetByPoint
mov di, bx
mov ax, space
stosw
loop loopDestroyWall
pop cx
ret
ENDP

initAllScreen PROC
mov si, offset screen
xor di, di
mov cx, xSize*ySize
rep movsw

xor ch, ch
mov cl, snakeSize
mov si, offset snakeBody

loopInitSnake:
mov bx, [si]
add si, PointSize

call CalcOffsetByPoint

mov di, bx

mov ax, snakeBodySymbol
stosw

loop loopInitSnake

call GenerateRandomApple

ret
ENDP

CalcOffsetByPoint PROC

push ax
push dx

xor ah, ah
mov al, bl
mov dl, xSize
mul dl
mov dl, bh
xor dh, dh
add ax, dx
mov dx, videoBufferCellSize
mul dx
mov bx, ax

pop dx
pop ax
ret
ENDP

MoveSnake PROC
push ax
push bx
push cx
push si
push di
push es

xor ax, ax
mov al, snakeSize
mov cx, ax
mov bx, PointSize
mul bx
mov di, offset snakeBody
add di, ax
mov si, di
sub si, PointSize

push di

mov es, videoStart
mov bx, ds:[si]
call CalcOffsetByPoint
mov di, bx
mov ax, space
stosw

pop di

mov es, dataStart
std
rep movsw
mov bx, snakeBody

add bh, Bmoveright
add bl, Bmovedown
mov snakeBody, bx

pop es
pop di
pop si
pop cx
pop bx
pop ax
ret
ENDP

mainGame PROC
push ax
push bx
push cx
push dx
push ds
push es

checkAndMoveLoop:
mov ah, 01h
int 16h
jnz checkEnteredSymbol
jmp noSymbolInBuff

checkEnteredSymbol:
mov ah, 00h
int 16h
cmp ah, KExit
jne skipJmp

jmp esc_exit

skipJmp:
cmp ah, KMoveLeft
je setMoveLeft

cmp ah, KMoveRight
je setMoveRight

cmp ah, KMoveUp
je setMoveUp

cmp ah, KMoveDown
je setMoveDown

cmp ah, KUpSpeed
je setSpeedUp

cmp ah, KDownSpeed
je setSpeedDown

jmp noSymbolInBuff

setMoveLeft:
mov al, Bmoveright
cmp al, forwardVal
jne setMoveLeft_ok
jmp noSymbolInBuff

setMoveLeft_ok:

mov Bmoveright, backwardVal
mov Bmovedown,  stopVal
jmp noSymbolInBuff

setMoveRight:
mov al, Bmoveright
cmp al, backwardVal
jne setMoveRight_ok
jmp noSymbolInBuff

setMoveRight_ok:

mov Bmoveright, forwardVal
mov Bmovedown, stopVal
jmp noSymbolInBuff

setMoveUp:
mov al, Bmovedown
cmp al, forwardVal
jne setMoveUp_ok
jmp noSymbolInBuff

setMoveUp_ok:

mov Bmoveright, stopVal
mov Bmovedown, backwardVal
jmp noSymbolInBuff

setMoveDown:
mov al, Bmovedown
cmp al, backwardVal
jne setMoveDown_ok
jmp noSymbolInBuff

setMoveDown_ok:

mov Bmoveright, stopVal
mov Bmovedown, forwardVal
jmp noSymbolInBuff

setSpeedUp:
mov ax, waitTime
cmp ax, minWaitTime
je noSymbolInBuff

sub ax, deltaTime
mov waitTime, ax

mov es, videoStart
mov di, offset speed - offset screen
mov ax, es:[di]
inc ax
mov es:[di], ax

jmp noSymbolInBuff

setSpeedDown:
mov ax, waitTime
cmp ax, maxWaitTime
je noSymbolInBuff

add ax, deltaTime
mov waitTime, ax

mov es, videoStart
mov di, offset speed - offset screen
mov ax, es:[di]
dec ax
mov es:[di], ax

noSymbolInBuff:
call MoveSnake

mov bx, snakeBody

checkSymbolAgain:
call CalcOffsetByPoint

mov es, videoStart
mov ax, es:[bx]

cmp ax, appleSymbol
je AppleIsNext

cmp ax, snakeBodySymbol
je SnakeIsNext

cmp ax, HWallSymbol
je PortalUpDown

cmp ax, VWallSymbol
je PortalLeftRight

cmp ax, BWallSymbol
je SnakeIsNext

jmp GoNextIteration

AppleIsNext:
call destroyWall
call incSnake
call GenerateRandomApple
call incScore
jmp GoNextIteration
SnakeIsNext:
jmp endLoop
PortalUpDown:
mov bx, snakeBody
sub bl, yField
cmp bl, 0
jg writeNewHeadPos

add bl, yField*2

writeNewHeadPos:
mov snakeBody, bx
jmp checkSymbolAgain

PortalLeftRight:
mov bx, snakeBody
sub bh, xField
cmp bh, 0
jg writeNewHeadPos

add bh, xField*2
jmp writeNewHeadPos

GoNextIteration:
mov bx, snakeBody
call CalcOffsetByPoint
mov di, bx
mov ax, snakeBodySymbol
stosw

call Sleep

jmp checkAndMoveLoop

endLoop:
pop es
pop ds
pop dx
pop cx
pop bx
pop ax
ret
ENDP

Sleep PROC
push ax
push bx
push cx
push dx

GetTimerValue

add dx, waitTime
mov bx, dx

checkTimeLoop:
GetTimerValue
cmp dx, bx
jl checkTimeLoop

pop dx
pop cx
pop bx
pop ax
ret
ENDP

GenerateRandomApple PROC
push ax
push bx
push cx
push dx
push es

mov ah, 2Ch
int 21h

mov al, dl
mul dh

xor dx, dx

mov cx, 04h
div cx
mov bh, dl

cmp bh, 0
jne rnd1
mov si, offset brickWall1
jmp writeToTemplate

rnd1:

cmp bh, 1
jne rnd2
mov si, offset brickWall2
jmp writeToTemplate

rnd2:

cmp bh, 2
jne rnd3
mov si, offset brickWall3
jmp writeToTemplate

rnd3:

mov si, offset brickWall4
jmp writeToTemplate

writeToTemplate:
mov di, offset brickWallTemplate
mov cx, brickWallSize

push ax
movswToTemplate:
mov ax, [si]
mov [di],ax
add di, 2
add si, 2
loop movswToTemplate
pop ax

generateRandomApplePosition:
mov ah, 2Ch
int 21h

mov al, dl
mul dh

xor dx, dx
mov cx, xField
div cx
add dx, 2
mov bh, dl

xor dx, dx
mov cx, yField
div cx
add dx, 2
mov bl, dl

push bx
call CalcOffsetByPoint
mov es, videoStart
mov ax, es:[bx]
pop bx

cmp ax, space
jne generateRandomApplePosition

mov cx, brickWallSize
mov si, offset brickWallTemplate

checkWallPlace:
push bx
add bx, [si]

push bx
call CalcOffsetByPoint
mov es, videoStart
mov ax, es:[bx]
pop bx

pop bx

cmp ax, space

jne generateRandomApplePosition

add si, PointSize
loop checkWallPlace

mov cx, brickWallSize
mov si, offset brickWallTemplate
mov di, offset brickWallTrue

push ax
copyTrueCoordinateOfWall:
mov ax, [si]
add ax, bx
mov [di], ax

add si, PointSize
add di, PointSize
loop copyTrueCoordinateOfWall
pop ax

call drawBrickWall

push bx
call CalcOffsetByPoint
mov es, videoStart
mov ax, appleSymbol;
mov es:[bx], ax
pop bx

pop es
pop dx
pop cx
pop bx
pop ax
ret
ENDP

incSnake PROC
push ax
push bx
push di
push es

mov al, snakeSize
cmp al, snakeMaxSize
je return
inc al
mov snakeSize, al
dec al

mov bl, PointSize
mul bl

mov di, offset snakeBody
add di, ax

mov es, dataStart
mov bx, es:[di]

call CalcOffsetByPoint
mov es, videoStart
mov es:[bx], snakeBodySymbol

return:
pop es
pop di
pop bx
pop ax
ret
ENDP

incScore PROC
push ax
push es
push si
push di
mov es, videoStart
mov cx, scoreSize
mov di, offset score + (scoreSize - 1) * videoBufferCellSize - offset screen

loop_score:
mov ax, es:[di]
cmp al, '9'
jne nineNotNow

sub al, 9
mov es:[di], ax

sub di, videoBufferCellSize

loop loop_score
jmp return_incScore

nineNotNow:
inc ax
mov es:[di], ax
return_incScore:
pop di
pop si
pop es
pop ax
ret
ENDP
end main



; [SOURCE]: C:\emu8086\MySource\snake2.asm
